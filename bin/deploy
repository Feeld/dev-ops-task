#!/bin/bash

# Version number to tag built images with
DAEMON_VERSION=1.0.3

_T="$(command -v terraform)"
_G="$(command -v gcloud)"
_K="$(command -v kubectl)"

test -x "${_T}" && HAVE_TERRAFORM=1
test -x "${_G}" && HAVE_GCLOUD=1
test -x "${_K}" && HAVE_KUBECTL=1

function __bail() {
    echo "Quitting."
    exit 1
}

function __need_terraform() {
    echo "You seem to be lacking the terraform binary."
    echo "Please see https://www.terraform.io/downloads.html for installation and setup instructions."
    __bail
}

function __need_gcloud() {
    echo "You seem to be lacking the gcloud binary."
    echo "Please see https://cloud.google.com/sdk/docs/downloads-interactive for installation and setup instructions."
    __bail
}

function __need_kubectl() {
    echo "You seem to be lacking the kubectl binary."
    if [[ -n "${HAVE_GCLOUD}" ]]; then
        echo "However, since you have gcloud installed, I can use it to get hold of it for you."
        read -n 1 -p "Use gcloud to install kubectl (y/n)? " resp
        echo
        if [[ ${resp} == "y" ]]; then
            "${_G}" components install kubectl
            return
        fi
    fi
    echo "Please see https://kubernetes.io/docs/tasks/tools/install-kubectl for installation and setup instructions."
    __bail
}

function __deps() {
    [[ -z "${HAVE_TERRAFORM}" ]] && __need_terraform
    [[ -z "${HAVE_GCLOUD}" ]] && __need_gcloud
    [[ -z "${HAVE_KUBECTL}" ]] && __need_kubectl

    echo
    echo "All dependencies appear to be present."
    echo "You can now deploy the environment with '${0} deploy'"
    echo
}

function __usage() {
    echo
    echo -n "  ${0} help          "
    echo "Show usage information for this script"
    echo -n "  ${0} deps          "
    echo "Check for all the software required by this package"
    echo -n "  ${0} all           "
    echo "Configure, Build, push, and deploy everything"
    echo -n "  ${0} bap           "
    echo "Build daemon Docker images and push them to GCR"
    echo -n "  ${0} terraform     "
    echo "Deploy Terraform-managed resources"
    echo -n "  ${0} kubernetes    "
    echo "Deploy Kubernetes-managed resources"
    echo -n "  ${0} staging       "
    echo "Deploy Kubernetes-managed resources to staging only"
    echo -n "  ${0} production    "
    echo "Deploy Kubernetes-managed resources to production only"
    echo -n "  ${0} build         "
    echo "Build daemon Docker images"
    echo -n "  ${0} push          "
    echo "Push daemon Docker images to GCR"
    echo
}

function __wrong_root() {
    echo "This command should be run in the repository root, that is the same"
    echo "directory which contains the LICENSE file."
    __bail
}

function __terraform() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    (
        cd terraform || exit 1
        ${_T} init
        ${_T} apply -auto-approve
    )
}

function __kproduction() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    cd kubernetes/yaml || exit 1
    ${_K} apply -f common/namespace-production.yml
    sleep 2
    ${_K} apply -n production -Rf resources
}

function __kstaging() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    cd kubernetes/yaml || exit 1
    ${_K} apply -f common/namespace-staging.yml
    sleep 2
    ${_K} apply -n staging -Rf resources
    ${_K} patch -n staging ingress ingress-api-daemon -p '{ "metadata": { "annotations": { "kubernetes.io/ingress.global-static-ip-name": "addr-staging-api-daemon" } } }'
    ${_K} patch -n staging ingress ingress-api-daemon -p '{ "metadata": { "annotations": { "networking.gke.io/managed-certificates": "cert-staging-api-daemon" } } }'
}

function __kubernetes() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    (
        echo
        echo "Configuring resources in production namespace"
        echo
        (
            __kproduction
        )
        echo
        echo "Configuring resources in staging namespace"
        echo
        (
            __kstaging
        )
        echo
        echo "Kubernetes resources configured"
        echo
    )
}

function __build() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    echo
    echo "Building daemons"
    echo
    (
        echo "Building api-daemon"
        echo
        cd services/api-daemon || exit 1
        docker build . -t gcr.io/feeld-daveio/api-daemon:${DAEMON_VERSION}
        echo
        echo "Built gcr.io/feeld-daveio/api-daemon:${DAEMON_VERSION}"
        echo
    )
    (
        echo "Building db-daemon"
        echo
        cd services/db-daemon || exit 1
        docker build . -t gcr.io/feeld-daveio/db-daemon:${DAEMON_VERSION}
        echo
        echo "Built gcr.io/feeld-daveio/db-daemon:${DAEMON_VERSION}"
        echo
    )
    echo "Finished"
    echo
}

function __push() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    echo
    echo "Pushing daemons"
    echo
    (
        echo "Pushing api-daemon"
        echo
        cd services/api-daemon || exit 1
        docker push gcr.io/feeld-daveio/api-daemon:${DAEMON_VERSION}
        echo
        echo "Pushed gcr.io/feeld-daveio/api-daemon:${DAEMON_VERSION}"
        echo
    )
    (
        echo "Pushing db-daemon"
        echo
        cd services/db-daemon || exit 1
        docker push gcr.io/feeld-daveio/db-daemon:${DAEMON_VERSION}
        echo
        echo "Pushed gcr.io/feeld-daveio/db-daemon:${DAEMON_VERSION}"
        echo
    )
    echo "Finished"
    echo
}

function __bap() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    __build
    __push
}

function __all() {
    [[ ! -f ./LICENSE ]] && __wrong_root
    echo
    echo "Stage 1: Dependency check"
    echo
    (
        __deps
    )
    echo
    echo "Stage 2: Terraform"
    echo
    (
        __terraform
    )
    echo
    echo "Stage 3: Build"
    echo
    (
        __build
    )
    echo
    echo "Stage 4: Push"
    echo
    (
        __push
    )
    echo
    echo "Stage 5: Kubernetes"
    echo
    (
        __kubernetes
    )
    echo
    echo "Deployment complete!"
}

case ${@} in
deps)
    __deps
    ;;
all)
    __all
    ;;
terraform)
    __terraform
    ;;
kubernetes)
    __kubernetes
    ;;
staging)
    __kstaging
    ;;
production)
    __kproduction
    ;;
build)
    __build
    ;;
push)
    __push
    ;;
bap)
    __bap
    ;;
help)
    __usage
    ;;
usage)
    __usage
    ;;
*)
    __usage
    ;;
esac
