image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 11.5.0-debian-9-r26
  pullPolicy: IfNotPresent

fullnameOverride: api-postgres

volumePermissions:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: stretch
    pullPolicy: Always
  securityContext:
    runAsUser: 0

securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001

serviceAccount:
  enabled: true

replication:
  enabled: true
  user: api_postgres_repl
  password: Phoy9Odaer9sheehoo7quieShaf6yei4
  slaveReplicas: 2
  synchronousCommit: "on"
  numSynchronousReplicas: 1
  applicationName: api_daemon

postgresqlUsername: api_daemon

postgresqlPassword: on1majeeg7EGhauWohbio9Aezeepaf0i

## PostgreSQL password using existing secret
## existingSecret: secret

## Mount PostgreSQL secret as a file instead of passing environment variable
# usePasswordFile: false

postgresqlDatabase: api_daemon

postgresqlDataDir: /bitnami/postgresql/data

## PostgreSQL client authentication configuration
## Specify content for pg_hba.conf
## Default: do not create pg_hba.conf
## Alternatively, you can put your pg_hba.conf under the files/ directory
pgHbaConfiguration: |-
  local all all trust
  host all all localhost trust
  host api_daemon api_daemon 172.17.0.0/16 trust
  host all postgres 172.17.0.0/16 trust
  hostnossl replication api_postgres_repl 172.17.0.0/16 md5
#  host mydatabase mysuser 192.168.0.0/24 md5

## PostgreSQL service configuration
service:
  type: ClusterIP
  port: 5432

persistence:
  enabled: true
  mountPath: /bitnami/postgresql
  accessModes:
    - ReadWriteOnce
  size: 8Gi

updateStrategy:
  type: RollingUpdate

## PostgreSQL Master parameters
master:
  nodeSelector: {}
  affinity: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  extraVolumeMounts: []
  extraVolumes: []

## PostgreSQL Slave parameters
slave:
  nodeSelector: {}
  affinity: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  extraVolumeMounts: []
  extraVolumes: []

resources:
  requests:
    memory: 256Mi
    cpu: 250m

networkPolicy:
  enabled: false
  allowExternal: true # false: require client label

livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

metrics:
  enabled: true
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.5.1-debian-9-r41
    pullPolicy: IfNotPresent
  securityContext:
    enabled: false
    runAsUser: 1001
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

extraEnv: {}
